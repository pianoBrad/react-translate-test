{
  "name": "counterpart",
  "version": "0.10.0",
  "description": "A translation and localization library for Node.js and the browser",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/martinandert/counterpart.git"
  },
  "keywords": [
    "globalization",
    "g11n",
    "internationalization",
    "i18n",
    "localization",
    "l10n",
    "translation",
    "translate",
    "localize"
  ],
  "author": {
    "name": "Martin Andert",
    "email": "mandert@gmail.com"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "bugs": {
    "url": "https://github.com/martinandert/counterpart/issues"
  },
  "homepage": "https://github.com/martinandert/counterpart",
  "dependencies": {
    "extend": "~1.2.1",
    "global": "~2.0.7",
    "sprintf": "~0.1.3",
    "date-names": "~0.1.2",
    "pluralizers": "~0.1.0"
  },
  "devDependencies": {
    "semver": "~2.2.1",
    "node-dev": "~2.1.6",
    "mocha": "~1.17.1",
    "jshint": "~2.4.3"
  },
  "readme": "# counterpart\n\nA translation and localization library for Node.js and the browser. The project is inspired by Ruby's famous [I18n gem](https://github.com/svenfuchs/i18n).\n\nFeatures:\n\n-  translation and localization\n-  interpolation of values to translations (sprintf-style with named arguments)\n-  pluralization (CLDR compatible)\n\n\n## Installation\n\nInstall via npm:\n\n```bash\n% npm install counterpart\n```\n\n\n## Usage\n\nRequire the counterpart module to get a reference to the `translate` function:\n\n```js\nvar translate = require('counterpart');\n```\n\nThis function expects a `key` and `options` as arguments and translates, pluralizes and interpolates a given key using a given locale, scope, and fallback, as well as interpolation values.\n\n### Lookup\n\nTranslation data is organized as a nested object using the top-level key as namespace. *E.g.*, the [damals package](https://github.com/martinandert/damals) ships with the translation:\n\n```js\n{ \n  damals: { \n    about_x_hours_ago: {\n      one:   'about one hour ago',\n      other: 'about %(count)s hours ago'\n    }\n    /* ... */\n  }\n}\n```\n\nTranslations can be looked up at any level of this object using the `key` argument and the `scope` option. *E.g.*, in the following example, a whole translation object is returned:\n\n```js\ntranslate('damals')  // => { about_x_hours_ago: { one: '...', other: '...' } }\n```\n\nThe `key` argument can be either a single key, a dot-separated key or an array of keys or dot-separated keys. So these examples will all look up the same translation:\n\n```js\ntranslate('damals.about_x_hours_ago.one')          // => 'about one hour ago'\ntranslate(['damals', 'about_x_hours_ago', 'one'])  // => 'about one hour ago'\ntranslate(['damals', 'about_x_hours_ago.one'])     // => 'about one hour ago'\n```\n\nThe `scope` option can be either a single key, a dot-separated key or an array of keys or dot-separated keys. Keys and scopes can be combined freely. Again, these examples will all look up the same translation:\n\n```js\ntranslate('damals.about_x_hours_ago.one')\ntranslate('about_x_hours_ago.one', { scope: 'damals' })\ntranslate('one', { scope: 'damals.about_x_hours_ago' })\ntranslate('one', { scope: ['damals', 'about_x_hours_ago'] })\n```\n\n### Interpolation\n\nTranslations can contain interpolation variables which will be replaced by values passed to the function as part of the options object, with the keys matching the interpolation variable names.\n\n*E.g.*, with a translation `{ foo: 'foo %(bar)s' }` the option value for the key `bar` will be interpolated into the translation:\n\n```js\ntranslate('foo', { bar: 'baz' }) // => 'foo baz'\n```\n\n### Pluralization\n\nTranslation data can contain pluralized translations. Pluralized translations are provided as a sub-object to the translation key containing the keys `one`, `other` and optionally `zero`:\n\n```js\n{\n  x_items: {\n    zero:  'No items.',\n    one:   'One item.',\n    other: '%(count)s items.'\n  }\n}\n```\n\nThen use the `count` option to select a specific pluralization:\n\n```js\ntranslate('x_items', { count: 0  })  // => 'No items.'\ntranslate('x_items', { count: 1  })  // => 'One item.'\ntranslate('x_items', { count: 42 })  // => '42 items.'\n```\n\nNote that this library currently only supports an algorithm for English-like pluralization rules (see [locales/en.js](locales/en.js). You can easily add  pluralization algorithms for other locales by [adding custom translation data](#adding-translation-data) to the \"counterpart\" namespace. Pull requests are welcome.\n\nAs seen above, the `count` option can be used both for pluralization and interpolation.\n\n### Fallbacks\n\nIf for a key no translation could be found, `translate` returns an error string of the form \"translation missing: %(key)s\". \n\nTo mitigate this, provide the `fallback` option with an alternate text. The following example returns the translation for \"baz\" or \"default\" if no translation was found:\n\n```js\ntranslate('baz', { fallback: 'default' })\n```\n\nYou can use interpolations with the `fallback` option, too.\n\n### Locales\n\nThe default locale is English (\"en\"). To change this, call the `setLocale` function:\n\n```js\ntranslate.getLocale()     // => 'en'\ntranslate.setLocale('de') // => 'en' (returns the previous locale)\ntranslate.getLocale()     // => 'de'\n```\n\nNote that it is advised to call `setLocale` only once at the start of the application or when the user changes her language preference. A library author integrating the counterpart package in a library should not call `setLocale` at all and leave that to the developer incorporating the library.\n\nIn case of a locale change, the `setLocale` function emits an event you can listen to:\n\n```js\ntranslate.onLocaleChange(function(newLocale, oldLocale) {\n  // do important stuff here...\n}, [callbackContext]);\n```\n\nUse `translate.offLocaleChange(myHandler)` to stop listening to locale changes.\n\nYou can temporarily change the current locale with the `withLocale` function:\n\n```js\ntranslate.withLocale(otherLocale, myCallback, [myCallbackContext]);\n```\n\n`withLocale` does not emit the locale change event. The function returns the return value of the supplied callback argument.\n\nAnother way to temporarily change the current locale is by using the `locale` option on `translate` itself:\n\n```js\ntranslate('foo', { locale: 'de' });\n```\n\nThere is also a `withScope` function that works exactly the same as `withLocale`.\n\n### Adding Translation Data\n\nYou can use the `registerTranslations` function to deep-merge data for a specific locale into the global translation object:\n\n```js\ntranslate.registerTranslations('de', require('counterpart/locales/de'));\ntranslate.registerTranslations('de', require('./locales/de.json'));\n```\n\nThe data object to merge should contain a namespace (e.g. the name of your app/library) as top-level key. The namespace ensures that there are no merging conflicts between different projects. Example (./locales/de.json):\n\n```json\n{\n  \"my_project\": {\n    \"greeting\": \"Hallo, %(name)s!\",\n    \"x_items\": {\n      \"one\":   \"1 Stück\",\n      \"other\": \"%(count)s Stücke\"\n    } \n  }\n}\n```\n\nThe translations are instantly made available:\n\n```js\ntranslate('greeting', { scope: 'my_project', name: 'Martin' })  // => 'Hallo, Martin!'\n```\n\nNote that library authors should preload their translations only for the default (\"en\") locale, since tools like [webpack](http://webpack.github.io/) or [browserify](http://browserify.org/) will recursively bundle up all the required modules of a library into a single file. This will include even unneeded translations and so unnecessarily bloat the bundle. \n\nInstead, you as a library author should advise end-users to on-demand-load translations for other locales provided by your package:\n\n```js\n// Execute this code to load the 'de' translations:\nrequire('counterpart').registerTranslations('de', require('my_package/locales/de'));\n```\n\n### Localization\n\nThe counterpart package comes with support for localizing JavaScript Date objects. The `localize` function expects a date and options as arguments. The following example demonstrates the possible options.\n\n```js\nvar date = new Date('Fri Feb 21 2014 13:46:24 GMT+0100 (CET)');\n\ntranslate.localize(date)                       // => 'Fri, 21 Feb 2014 13:46'\ntranslate.localize(date, { format: 'short' })  // => '21 Feb 13:46'\ntranslate.localize(date, { format: 'long' })   // => 'Friday, February 21st, 2014 13:46:24 +01:00'\n\ntranslate.localize(date, { type: 'date' })                  // => 'Fri, 21 Feb 2014'\ntranslate.localize(date, { type: 'date', format: 'short' }) // => 'Feb 21'\ntranslate.localize(date, { type: 'date', format: 'long' })  // => 'Friday, February 21st, 2014'\n\ntranslate.localize(date, { type: 'time' })                  // => '13:46'\ntranslate.localize(date, { type: 'time', format: 'short' }) // => '13:46'\ntranslate.localize(date, { type: 'time', format: 'long' })  // => '13:46:24 +01:00'\n\ntranslate.registerTranslations('de', require('counterpart/locales/de'));\ntranslate.localize(date, { locale: 'de' })  // => 'Fr, 21. Feb 2014, 13:46 Uhr'\n```\n\nSure, you can integrate custom localizations by adding to or overwriting the \"counterpart\" namespace. See [locales/en.js](locales/en.js) and [locales/de.js](locales/de.js) for example localization files.\n\n\n## Contributing\n\nHere's a quick guide:\n\n1. Fork the repo and `make install`.\n\n2. Run the tests. We only take pull requests with passing tests, and it's great to know that you have a clean slate: `make test`.\n\n3. Add a test for your change. Only refactoring and documentation changes require no new tests. If you are adding functionality or are fixing a bug, we need a test!\n\n4. Make the test pass.\n\n5. Push to your fork and submit a pull request.\n\n\n## License\n\nReleased under The MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "counterpart@0.10.0",
  "dist": {
    "shasum": "98f9c8693fadb7f9f3038b79185b689ceb5d2105"
  },
  "_from": "counterpart@~0.10.0",
  "_resolved": "https://registry.npmjs.org/counterpart/-/counterpart-0.10.0.tgz"
}
