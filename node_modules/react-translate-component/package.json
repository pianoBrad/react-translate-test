{
  "name": "react-translate-component",
  "version": "0.3.0",
  "description": "A component for React that utilizes the counterpart module to translate/localize its content",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/martinandert/react-translate-component.git"
  },
  "keywords": [
    "react",
    "react-component",
    "translation",
    "translate",
    "localization",
    "localize",
    "interpolation",
    "interpolate",
    "i18n"
  ],
  "author": {
    "name": "Martin Andert",
    "email": "mandert@gmail.com"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "bugs": {
    "url": "https://github.com/martinandert/react-translate-component/issues"
  },
  "homepage": "https://github.com/martinandert/react-translate-component",
  "dependencies": {
    "extend": "~1.2.1"
  },
  "peerDependencies": {
    "react": "~0.9.0",
    "counterpart": "~0.10.0",
    "react-interpolate-component": "~0.3.0"
  },
  "devDependencies": {
    "semver": "~2.2.1",
    "node-dev": "~2.1.6",
    "jsxhint": "~0.4.2",
    "mocha": "~1.17.1",
    "connect-browserify": "~1.0.0",
    "express": "~3.4.8",
    "node-jsx": "~0.2.1",
    "reactify": "~0.7.0",
    "react": "~0.9.0",
    "counterpart": "~0.10.0",
    "react-interpolate-component": "~0.3.0"
  },
  "readme": "# React Translate Component\n\nTranslate is a component for [React][1] that utilizes the [Counterpart module][2] and the [Interpolate component][3] to provide multi-lingual/localized text content. It enables switching locales without a page reload.\n\n\n## Installation\n\nInstall via npm:\n\n```bash\n% npm install react-translate-component\n```\n\n\n## Usage\n\nHere is a quick-start tutorial to get you up and running with Translate. It's a step-by-step guide on how to build a simple app that uses the Translate component from scratch. We assume you have the latest versions of [Node.js][5] and [npm][6] installed.\n\nFirst, let's create a new project:\n\n```bash\n$ mkdir translate-example\n$ cd translate-example\n$ touch client.js\n$ npm init                   # accept all defaults here\n```\n\nNext, add a dependency to our Translate component:\n\n```bash\n$ npm install react-translate-component --save\n```\n\nThis also installs React and Counterpart because these are configured as a peer dependencies.\n\nWe will put our application logic into `client.js`. Open the file in your favorite editor and add the following lines:\n\n```js\n'use strict';\n\nvar counterpart = require('counterpart');\nvar React       = require('react');\nvar Translate   = require('react-translate-component');\n```\n\nThis loads the localization library, React and our Translate component.\n\nLet's write our entry-point React component. Add the following code to the file:\n\n```js\nvar MyApp = React.createClass({\n  displayName: 'MyApp',\n\n  render: function() {\n    return (\n      React.DOM.html(null,\n        React.DOM.head(null,\n          React.DOM.meta({ charSet: 'utf-8' }),\n          React.DOM.title(null, 'React Translate Quick-Start'),\n          React.DOM.script({ src: '/bundle.js' })\n        ),\n\n        React.DOM.body(null,\n          '--> body content will be added soon <--'\n        )\n      )\n    );\n  }\n});\n\nif (typeof window !== 'undefined') {\n  window.onload = function() {\n    React.renderComponent(MyApp(), document);\n  };\n}\n\nmodule.exports = MyApp;\n```\n\nNow we have the basic HTML chrome for our tiny little app.\n\nNext, we will create a LocaleSwitcher component which will be used to, well, switch locales. Here is the code to append to `client.js`:\n\n```js\nvar LocaleSwitcher = React.createClass({\n  handleChange: function(e) {\n    counterpart.setLocale(e.target.value);\n  },\n\n  render: function() {\n    return (\n      React.DOM.p(null,\n        React.DOM.span(null, 'Switch Locale: '),\n\n        React.DOM.select(\n            { \n              defaultValue: counterpart.getLocale(), \n              onChange:     this.handleChange\n            }, \n          React.DOM.option(null, 'en'),\n          React.DOM.option(null, 'de')\n        )\n      )\n    );\n  }\n});\n```\n\nFor demonstration purposes, we don't bother and hard-code the available locales. \n\nWhenever the user selects a different locale from the drop-down, we correspondingly set the new drop-down's value as locale in the Counterpart library, which in turn triggers an event that our (soon to be integrated) Translate component listens to. As initially active value for the select element we specify Counterpart's current locale (\"en\" by default).\n\nNow add LocaleSwitcher as child of the empty body element of our MyApp component:\n\n```js\n        React.DOM.body(null,\n          LocaleSwitcher()\n        )\n```\n\nNext, we create a Greeter component that is going to display a localized message which will greet you:\n\n```js\nvar Greeter = React.createClass({\n  render: function() {\n    return this.transferPropsTo(\n      Translate(null, 'example.greeting')\n    );\n  }\n});\n```\n\nIn the component's render function, we simply transfer all incoming props to Translate (the component this repo is all about). As its only child we specify the string \"example.greeting\" which acts as the key into the translations dictionary of Counterpart.\n\nNow add the new Greeter component to the body element, provide a `name` prop holding your first name and a `component` prop which is set to `React.DOM.h1`:\n\n```js\n        React.DOM.body(null,\n          LocaleSwitcher(),\n          Greeter({ name: 'Martin', component: React.DOM.h1 })\n        )\n```\n\nThe value of the `name` prop will be interpolated into the translation result. The `component` prop tells Translate which HTML tag to render as container element (a `<span>` by default).\n\nAll that's left to do is to add the actual translations. You do so by calling the `registerTranslations` function of Counterpart. Add this to `client.js`:\n\n```js\ncounterpart.registerTranslations('en', {\n  example: {\n    greeting: 'Hello %(name)s! How are you today?'\n  }\n});\n\ncounterpart.registerTranslations('de', {\n  example: {\n    greeting: 'Hallo, %(name)s! Wie geht\\'s dir heute so?'\n  }\n});\n```\n\nIn the translations above we defined placeholders (in sprintf's named arguments syntax) which will be interpolated with the value of the `name` prop we gave to the Greeter component.\n\nThat's it for the application logic. To eventually see this working in a browser, we need to create the server-side code that will be executed by Node.js.\n\nFirst, let's install some required dependencies and create a `server.js` file:\n\n```bash\n$ npm install express connect-browserify --save\n$ touch server.js\n```\n\nNow open up `server.js` and add the following lines:\n\n```js\n'use strict';\n\nvar express     = require('express');\nvar browserify  = require('connect-browserify');\nvar render      = require('react').renderComponentToString;\nvar App         = require('./client');\n\nexpress()\n  .use('/bundle.js', browserify.serve({\n    entry: __dirname + '/client',\n    debug: true, watch: true\n  }))\n  .get('/', function(req, res, next) {\n    res.send(render(App()));\n  })\n  .listen(3000, function() {\n    console.log('Point your browser to http://localhost:3000');\n  });\n```\n\nNote that you shouldn't use this code in production as the `bundle.js` file will be compiled on every request.\n\nLast but not least, start the application:\n\n```bash\n$ node server.js\n```\n\nIt should tell you to point your browser to [http://localhost:3000][8]. There you will find the page greeting you. Observe that when switching locales the greeting message adjusts its text to the new locale without ever reloading the page or doing any ajax magic.\n\nPlease take a look at this repo's `spec.js` file to see some more nice tricks. To become a master craftsman we encourage you to also read [Counterpart's README][7].\n\n\n## An Advanced Example\n\nThe code for a more sophisticated example can be found in the repo's `example` directory. You can clone this repository and run `make install example` and point your web browser to\n`http://localhost:3000`. In case you are too lazy for that, we also have a [live demo of the example app][4] on Heroku.\n\n\n## Contributing\n\nHere's a quick guide:\n\n1. Fork the repo and `make install`.\n\n2. Run the tests. We only take pull requests with passing tests, and it's great to know that you have a clean slate: `make test`.\n\n3. Add a test for your change. Only refactoring and documentation changes require no new tests. If you are adding functionality or are fixing a bug, we need a test!\n\n4. Make the test pass.\n\n5. Push to your fork and submit a pull request.\n\n\n## Licence\n\nReleased under The MIT License.\n\n\n\n[1]: http://facebook.github.io/react/\n[2]: https://github.com/martinandert/counterpart\n[3]: https://github.com/martinandert/react-interpolate-component\n[4]: http://react-translate-component.herokuapp.com/\n[5]: http://nodejs.org/\n[6]: https://www.npmjs.org/\n[7]: https://github.com/martinandert/counterpart#readme\n[8]: http://localhost:3000\n",
  "readmeFilename": "README.md",
  "_id": "react-translate-component@0.3.0",
  "dist": {
    "shasum": "45c49201ca17f93c671e9de5ec62db6c5e8448aa"
  },
  "_from": "react-translate-component@",
  "_resolved": "https://registry.npmjs.org/react-translate-component/-/react-translate-component-0.3.0.tgz"
}
